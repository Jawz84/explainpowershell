@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Text.Json;
@page "/"
@inject HttpClient Http

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-16">
    <MudText Typo="Typo.h3" GutterBottom="true">Explain PowerShell</MudText>
    <MudText Class="mb-4">Get explanation for Powershell code oneliner</MudText>
    <MudLink @onclick="OpenPocInfo">[Proof of concept info]</MudLink>
    <MudOverlay @bind-Visible="pocInfoIsVisible" DarkBackground="true" AutoClose="true">
        <MudPaper Class="pa-8">
            <MudText>
            Currently supported modules: <br>
            <br>
            CimCmdlets<br>
            Microsoft.PowerShell.Core<br>
            Microsoft.PowerShell.LocalAccounts<br>
            Microsoft.PowerShell.Management<br>
            Microsoft.PowerShell.Security<br>
            Microsoft.PowerShell.Utility<br>
            Microsoft.WSMan.Management<br>
            PackageManagement<br>
            Pester<br>
            posh-git<br>
            PowerShellEditorServices.Commands<br>
            PowerShellEditorServices.VSCode<br>
            PowerShellGet<br>
            PSReadLine
            </MudText>
        </MudPaper>
    </MudOverlay>

    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-10">
        <MudCard>
            <MudForm>
                <MudCardContent>
                    <MudTextField @bind-Value="InputValue" Immediate="true" T="string" Label="PowerShell oneliner to analyze" AutoFocus="true" />
                    @if (requestHasError) {<MudAlert class="mt-2" OnClick="@acknowledgeAlert" Severity="Severity.Error">@reasonPhrase</MudAlert>}
                </MudCardContent>
                <MudCardActions>
                    @if (waiting)
                    {
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small" Class="ml-auto"/>
                    }
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@OnInitializedAsync" Disabled="@waiting" >Submit</MudButton>
                </MudCardActions>
            </MudForm>
        </MudCard>
    </MudContainer>
    <MudDivider DividerType="DividerType.Middle" Class="my-6" hidden="@hideExpandedCode"/>
    <MudText Align="Align.Center" hidden="@hideExpandedCode">@expandedCode</MudText>
    <MudDivider DividerType="DividerType.Middle" Class="my-6" hidden="@hasNoExplanations"/>
    <MudTable Items="@explanations" Hover="true" Breakpoint="Breakpoint.Sm" hidden="@hasNoExplanations">
        <HeaderContent>
            <MudTh>Original Extent</MudTh>
            <MudTh>CommandName</MudTh>
            <MudTh>Synopsis</MudTh>
            <MudTh>ModuleName</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Original Extent">@context.OriginalExtent</MudTd>
            <MudTd DataLabel="CommandName">
                @if(@context.HelpResult != null) 
                {
                    <MudLink Href="@context.HelpResult?.DocumentationLink" Target="_blank">@context.CommandName</MudLink>
                }
                else {
                    @context.CommandName
                }
            </MudTd>
            <MudTd DataLabel="Synopsis">@context.Synopsis</MudTd>
            <MudTd DataLabel="Module">@context.HelpResult?.ModuleName</MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {
    private bool requestHasError {get;set;}
    private string reasonPhrase {get;set;}
    private bool waiting {get;set;}
    private bool hideExpandedCode {get;set;}
    private List<Explanation> explanations {get; set;} = new();
    private AnalysisResult analysisResult {get;set;} = new();
    private string expandedCode {get; set;}

    private bool hasNoExplanations {
        get {
            if (explanations == null) 
                return true;

            return explanations.Count <= 0;
        }
    }

    private string InputValue {
        get {
            return _inputValue;
        }
        set {
            if (value.Length <= 255)
                _inputValue = value;
        }
    }

    private void acknowledgeAlert() {
        requestHasError = false;
        reasonPhrase = "";
    }

    protected override async Task OnInitializedAsync()
    {
        hideExpandedCode = true;
        waiting = false;
        requestHasError = false;
        reasonPhrase = string.Empty;
        explanations = null;

        if (string.IsNullOrEmpty(InputValue))
            return;

        waiting = true;
        var code = new Code() { PowershellCode = InputValue };

        var temp = await Http.PostAsJsonAsync<Code>("SyntaxAnalyzer", code);

        if (!temp.IsSuccessStatusCode) 
        {
            requestHasError = true;
            waiting = false;
            reasonPhrase = await temp.Content.ReadAsStringAsync();
            return;
        }

        analysisResult = await JsonSerializer.DeserializeAsync<AnalysisResult>(temp.Content.ReadAsStream());

        if (!string.IsNullOrEmpty(analysisResult.ParseErrorMessage))
        {
            requestHasError = true;
            reasonPhrase = analysisResult.ParseErrorMessage;
        }

        waiting = false;

        explanations = analysisResult.Explanations;
        expandedCode = analysisResult.ExpandedCode;
        hideExpandedCode = false;
    }

    public void OpenPocInfo() {
        pocInfoIsVisible = true;
        StateHasChanged();
    }

    private bool pocInfoIsVisible;
    private string _inputValue;
}