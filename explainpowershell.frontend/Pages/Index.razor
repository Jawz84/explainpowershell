@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Text.Json;
@page "/"
@inject HttpClient Http

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-16">
    <MudText Typo="Typo.h3" GutterBottom="true">Explain PowerShell</MudText>
    <MudText Class="mb-4">Get explanation for Powershell code oneliner</MudText>
    <MudLink @onclick="OpenPocInfo">[Proof of concept info]</MudLink>
    <MudOverlay @bind-Visible="pocInfoIsVisible" DarkBackground="true" AutoClose="true">
        <MudPaper Class="pa-8">
            <MudText>
            Currently supported modules: <br>
            <br>
            Az (multiple)<br>
            CimCmdlets<br>
            Microsoft.PowerShell.Core<br>
            Microsoft.PowerShell.LocalAccounts<br>
            Microsoft.PowerShell.Management<br>
            Microsoft.PowerShell.Security<br>
            Microsoft.PowerShell.Utility<br>
            Microsoft.WSMan.Management<br>
            PackageManagement<br>
            Pester<br>
            posh-git<br>
            PowerShellEditorServices.Commands<br>
            PowerShellEditorServices.VSCode<br>
            PowerShellGet<br>
            PSReadLine
            </MudText>
        </MudPaper>
    </MudOverlay>

    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-10">
        <MudCard Elevation="2">
            <MudForm>
                <MudCardContent>
                    <MudTextField @bind-Value="InputValue" Immediate="true" T="string" Label="PowerShell oneliner to analyze" AutoFocus="true" />
                    @if (requestHasError) {<MudAlert class="mt-2" OnClick="@acknowledgeAlert" Severity="Severity.Error">@reasonPhrase</MudAlert>}
                </MudCardContent>
                <MudCardActions>
                    @if (waiting)
                    {
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small" Class="ml-auto"/>
                    }
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@OnInitializedAsync" Disabled="@waiting" >Submit</MudButton>
                </MudCardActions>
            </MudForm>
        </MudCard>
    </MudContainer>
    <MudDivider DividerType="DividerType.Middle" Class="my-6" hidden="@hideExpandedCode"/>
    <MudText Align="Align.Center" hidden="@hideExpandedCode">@expandedCode</MudText>
    <MudDivider DividerType="DividerType.Middle" Class="my-6" hidden="@hasNoExplanations"/>
    <MudContainer MaxWidth="MaxWidth.Medium">
        <MudTreeView Items="TreeItems">
            <ItemTemplate>
                <MudTreeViewItem @bind-Expanded="@context.IsExpanded" Items="@context.Children" >
                    <Content>
                        <MudTreeViewItemToggleButton @bind-Expanded="@context.IsExpanded" Visible="@context.HasChildren" /> 
                        <MudCard Class="mb-2 px-3 py-2" Elevation="2" >
                            <MudText Typo="Typo.h6" >@context.Item.OriginalExtent</MudText>
                            <MudText>@if(@context.Item.HelpResult != null) 
                                {
                                    <MudLink Href="@context.Item.HelpResult?.DocumentationLink" Target="_blank">@context.Item.CommandName</MudLink>
                                }
                                else {
                                    @context.Item.CommandName
                                }
                            </MudText>
                            <MudText>@context.Item.Description</MudText>
                            @if(! string.IsNullOrEmpty(@context.Item.HelpResult?.ModuleName)) {
                                <MudText><b>Module:</b> @context.Item.HelpResult?.ModuleName</MudText>
                            }
                        </MudCard>
                    </Content>
                </MudTreeViewItem>
            </ItemTemplate>
        </MudTreeView>
    </MudContainer>
</MudContainer>

@code {
    private bool requestHasError {get;set;}
    private string reasonPhrase {get;set;}
    private bool waiting {get;set;}
    private bool hideExpandedCode {get;set;}
    private string expandedCode {get; set;}
    private HashSet<TreeItem<Explanation>> TreeItems { get; set; } = new HashSet<TreeItem<Explanation>>();
    private bool hasNoExplanations {
        get {
            return TreeItems.Count <= 0;
        }
    }
    private string InputValue {
        get {
            return _inputValue;
        }
        set {
            if (value.Length <= 255)
                _inputValue = value;
        }
    }

    private void acknowledgeAlert() {
        requestHasError = false;
        reasonPhrase = "";
    }

    protected override async Task OnInitializedAsync()
    {
        hideExpandedCode = true;
        waiting = false;
        requestHasError = false;
        reasonPhrase = string.Empty;

        if (string.IsNullOrEmpty(InputValue))
            return;

        waiting = true;
        var code = new Code() { PowershellCode = InputValue };

        HttpResponseMessage temp;
        try {
            temp = await Http.PostAsJsonAsync<Code>("SyntaxAnalyzer", code);
        }
        catch {
            requestHasError = true;
            waiting = false;
            reasonPhrase = "oops!";
            return;
        }

        if (!temp.IsSuccessStatusCode) 
        {
            requestHasError = true;
            waiting = false;
            reasonPhrase = await temp.Content.ReadAsStringAsync();
            return;
        }

        var analysisResult = await JsonSerializer.DeserializeAsync<AnalysisResult>(temp.Content.ReadAsStream());

        if (!string.IsNullOrEmpty(analysisResult.ParseErrorMessage))
        {
            requestHasError = true;
            reasonPhrase = analysisResult.ParseErrorMessage;
        }

        waiting = false;
        hideExpandedCode = false;

        TreeItems = analysisResult.Explanations.GenerateTree(expl => expl.Id, expl => expl.ParentId);
        expandedCode = analysisResult.ExpandedCode;
    }

    public void OpenPocInfo() {
        pocInfoIsVisible = true;
        StateHasChanged();
    }

    private bool pocInfoIsVisible;
    private string _inputValue;
}