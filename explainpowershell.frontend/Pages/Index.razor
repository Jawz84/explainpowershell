@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Text.Json;
@page "/"
@inject HttpClient Http

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-16">
    <MudText Typo="Typo.h3" GutterBottom="true">Explain PowerShell</MudText>
    <MudText Class="mb-4">Get explanation for Powershell code oneliner</MudText>
    <MudLink @onclick="OpenPocInfo">[Proof of concept info]</MudLink>
    <MudOverlay @bind-Visible="pocInfoIsVisible" DarkBackground="true" AutoClose="true">
        <MudPaper Class="pa-8">
            <MudText>
            Currently supported modules: <br>
            <br>
            CimCmdlets *experimental<br>
            Microsoft.PowerShell.Core<br>
            Microsoft.PowerShell.LocalAccounts<br>
            Microsoft.PowerShell.Management<br>
            Microsoft.PowerShell.Security<br>
            Microsoft.PowerShell.Utility<br>
            Microsoft.WSMan.Management<br>
            PackageManagement *experimental<br>
            Pester *experimental<br>
            posh-git *experimental<br>
            PowerShellEditorServices.Commands *experimental<br>
            PowerShellEditorServices.VSCode *experimental<br>
            PowerShellGet *experimental<br>
            PSReadLine *experimental
            </MudText>
        </MudPaper>
    </MudOverlay>
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-10">
        <MudCard>
            <MudForm>
                <MudCardContent>
                    <MudTextField @bind-Value="InputValue" T="string" Label="PowerShell oneliner to analyze" AutoFocus="true" />
                </MudCardContent>
                <MudCardActions>
                    @if (waiting)
                    {
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small" Class="ml-auto"/>
                    }
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@OnInitializedAsync" Disabled="@waiting" >Submit</MudButton>
                </MudCardActions>
            </MudForm>
        </MudCard>
    </MudContainer>
    <MudDivider DividerType="DividerType.Middle" Class="my-6" hidden="@hasNoExplanations"/>
    <MudText Align="Align.Center">@expandedCode</MudText>
    <MudDivider DividerType="DividerType.Middle" Class="my-6" hidden="@hasNoExplanations"/>
    <MudTable Items="@explanations" Hover="true" Breakpoint="Breakpoint.Sm" hidden="@hasNoExplanations">
        <HeaderContent>
            <MudTh>Original Extent</MudTh>
            <MudTh>CommandName</MudTh>
            <MudTh>Synopsis</MudTh>
            <MudTh>Documentation</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Original Extent">@context.OriginalExtent</MudTd>
            <MudTd DataLabel="CommandName">@context.CommandName</MudTd>
            <MudTd DataLabel="Synopsis">@context.Synopsis</MudTd>
            @if(@context.HelpResult != null) 
            {
                <MudIconButton Icon="@Icons.Material.Filled.ContactSupport" Color="Color.Inherit" Link="@context.HelpResult?.DocumentationLink" Target="_blank" />
            }
        </RowTemplate>
    </MudTable>
    <MudDivider DividerType="DividerType.Middle" Class="my-6" hidden="@hasNoModules"/>
    <MudTable Items="@modules" Hover="true" Breakpoint="Breakpoint.Sm" hidden="@hasNoModules">
        <HeaderContent>
            <MudTh>Detected Modules</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Module Name">@context.ModuleName</MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {
    private bool pocInfoIsVisible;

    private bool waiting {get;set;}
    private List<Explanation> explanations {get; set;} = new();
    private AnalysisResult analysisResult {get;set;} = new();

    private string expandedCode {get; set;}

    private List<Module> modules {get; set;}

    private bool hasNoExplanations {
        get {
            if (explanations == null) 
                return true;

            return explanations.Count <= 0;
        }
    }
    private bool hasNoModules {
        get {
            if (modules == null) 
                return true;

            return modules.Count <= 0;
        }
    }
    private string InputValue { get; set; }

    protected override async Task OnInitializedAsync()
    {
        waiting = false;

        if (!string.IsNullOrEmpty(InputValue))
        {
            waiting = true;
            var code = new Code() { PowershellCode = InputValue };

            var temp = await Http.PostAsJsonAsync<Code>("SyntaxAnalyzer", code);

            analysisResult = await JsonSerializer.DeserializeAsync<AnalysisResult>(temp.Content.ReadAsStream());

            waiting = false;

            explanations = analysisResult.Explanations;
            modules = analysisResult.DetectedModules;
            expandedCode = analysisResult.ExpandedCode;
        }
    }

    public void OpenPocInfo() {
        pocInfoIsVisible = true;
        StateHasChanged();
    }
}