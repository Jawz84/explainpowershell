on:
  workflow_dispatch: 
  push:
    branches:
    - main
name: Deploy app to Azure
jobs:
  deployBackend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@master
      name: Download artifacts
      with:
        name: api
    - uses: azure/login@v1
      name: Authenticate with Azure
      with:
        creds: ${{ secrets.AZURE_SERVICE_PRINCIPAL }}
    - run: |
        $json = az functionapp deployment list-publishing-profiles --name "${{ secrets.FUNCTION_APP_NAME }}".trim() --resource-group "${{ secrets.RESOURCE_GROUP_NAME }}".trim()
        $funcProfile = $(
            "<publishData>"
            foreach ($publishProfile in ($json | ConvertFrom-Json)) {
                "<publishProfile "
                foreach ($prop in $publishProfile.psobject.Properties | where name -ne databases) {
                    "$($prop.Name)=`"$($prop.Value)`" "
                }
                "><databases /></publishProfile>"
            }
            "</publishData>"
        ) -join ''

        ##Write-Output "::add-mask::$funcProfile"
        write-output $funcProfile
        Write-Output "::set-output name=profile::$funcProfile"
      name: Get functionapp publish profile
      id: publishprofile
      shell: pwsh
    - uses: Azure/functions-action@v1
      name: Run Azure Functions Action
      id: fa
      with:
        package: ./
        publish-profile: ${{ steps.publishprofile.outputs.profile }}
        app-name: ${{ secrets.FUNCTION_APP_NAME }}
    - run: "az functionapp list |\n  ConvertFrom-Json |\n  where {$_.defaulthostname -match 'powershellexplainer' -and $_.state -eq 'running'} | \n  ForEach-Object { Invoke-RestMethod -Uri \"https://$($_.DefaultHostName)/api/MetaData?refresh=true\" }\n"
      name: Calculate new HelpMetaData
      shell: pwsh
    needs: buildBackend
    name: Deploy Backend api
  buildBackend:
    runs-on: ubuntu-latest
    steps:
    - with:
        dotnet-version: "6.0"
      uses: actions/setup-dotnet@v1
    - uses: actions/checkout@v1
    - run: Get-ChildItem -Path ./explainpowershell.analysisservice/ -Recurse -Filter *_code_generator.ps1 | ForEach-Object { & $_.FullName }
      name: Run code generators
      shell: pwsh
    - run: |
        Set-Location ./explainpowershell.analysisservice
        dotnet build --configuration Release
      name: Build with dotnet
      shell: pwsh
    - uses: actions/upload-artifact@master
      name: Publish artifacts
      with:
        name: api
        path: ./explainpowershell.analysisservice/bin/Release/net6.0
    name: Build Backend api
  buildFrontend:
    runs-on: ubuntu-latest
    steps:
    - with:
        dotnet-version: "6.0"
      uses: actions/setup-dotnet@v1
    - uses: actions/checkout@v1
    - run: |
        $uri = "https://$("${{ secrets.FUNCTION_APP_NAME }}".trim()).azurewebsites.net/api/"
        Set-Content -Path ./explainpowershell.frontend/wwwroot/appsettings.json -Value (@{BaseAddress = $uri} | ConvertTo-Json)
        Get-Content -path ./explainpowershell.frontend/wwwroot/appsettings.json
      name: Set api url to correct url manually
      shell: pwsh
    - run: Get-ChildItem -Path ./explainpowershell.frontend/ -Recurse -Filter *_code_generator.ps1 | ForEach-Object { & $_.FullName }
      name: Run code generators
      shell: pwsh
    - run: dotnet build --configuration Release explainpowershell.frontend
      name: Build with dotnet
    - run: dotnet publish --configuration Release explainpowershell.frontend
      name: Publish with dotnet
    - uses: actions/upload-artifact@master
      name: Publish artifacts
      with:
        name: webapp
        path: ./explainpowershell.frontend/bin/Release/net6.0/publish/wwwroot
    name: Build Frontend
  deployFrontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@master
      name: Download artifacts
      with:
        name: webapp
    - uses: azure/login@v1
      name: Authenticate with Azure
      with:
        creds: ${{ secrets.AZURE_SERVICE_PRINCIPAL }}
    - run: "az storage blob delete-batch --account-name \"${{ secrets.STORAGE_ACCOUNT_NAME }}\".trim() --source `$web \n"
      name: Clean up previous deployment
      shell: pwsh
    - run: |
        az storage blob upload-batch --account-name "${{ secrets.STORAGE_ACCOUNT_NAME }}".trim() --source ./ --destination `$web
      name: Deploy to storage account
      shell: pwsh
    - run: |
        if ( -not [String]::IsNullOrEmpty("${{ secrets.AZURE_CDN_ENDPOINT }}".trim()) ) {
          az cdn endpoint purge -n "${{ secrets.AZURE_CDN_ENDPOINT }}".trim() --profile-name "${{ secrets.AZURE_CDN_ENDPOINT }}".trim() --content-paths "/*" --resource-group "${{ secrets.RESOURCE_GROUP_NAME }}".trim()
          "Az CDN endpoint purged"
        }
      name: Purge Azure CDN
      shell: pwsh
    needs: buildFrontend
    name: Deploy Frontend

