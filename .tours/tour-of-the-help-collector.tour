{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Tour of the help collector",
  "steps": [
    {
      "file": ".github/workflows/add_module_help.yml",
      "description": "Welcome to the help collector tour.\n\nThe CmdLet explanations generated by Explain PowerShell come from cached help information from modules. To cache help information, the module must be installed and all help files for this module must be cached. We call that help scraping or collecting. \n\nWe are going to have a look at what the help collection process looks like by following the process from request to cached help.\n\nThis Yaml pipeline is a GitHub Action that is automatically run when someone comments on issue [#43](https://github.com/Jawz84/explainpowershell/issues/43).\n",
      "line": 2
    },
    {
      "file": ".github/workflows/add_module_help.yml",
      "description": "A little bit above here, the requested module is installed on the GitHub action runner and here, the `helpcollector.ps1` script is run. This script will get all the relevant help information from the module.  \n\nThe output is saved to json, and a check is done to see if there actually is any data in the file. ",
      "line": 46
    },
    {
      "file": ".github/workflows/add_module_help.yml",
      "description": "Here the `helpwriter.ps1` script is started, and is given the path to the cached json output from the previous step. This basically writes the information to an Azure Storage Table.\n\nThe steps below are just to notify the requester of the module if everything succeeded or not. We will have a look over at the scripts now, to see what they do.",
      "line": 68
    },
    {
      "file": "explainpowershell.helpcollector/helpcollector.ps1",
      "description": "This is the `helpcollector.ps1` script that reads help information for each command in a module. \n\nIt: \n- Tries to update help for the module\n- Gets names of all the commands (and skips aliases)\n- Gathers help info for each command and outputs this as an object to the pipeline.",
      "line": 86
    },
    {
      "file": "explainpowershell.helpcollector/helpwriter.ps1",
      "description": "We store the help data in an Azure Storage Table. These are tables with two very important columns: `PartitionKey` and `RowKey`. Data from a Table like this, is retrieved based on these two columns. If a want a certain row, I ask for `(PartitionKey='x' RowKey='y')`, if my data is at x, y so to speak. So if we store data, the string that is in the PartitionKey and the RowKey, needs to be unique and easily searchable. That's why we convert the name of the command to lower case. When we search for a command later, we can convert that commandname to lower too, and be sure we always find the right command, even when the user MIsTyped-ThecOmmand. ",
      "line": 48
    },
    {
      "file": "explainpowershell.helpcollector/BulkHelpCollector.ps1",
      "description": "This script is used to scrape a lot of modules at once, after they are installed manually. Some modules require special prerequisites (like the Windows RSAT module, or the Exchange module). This script can be usefull in those cases. It produces a json file per scraped module.\n\nIt can be used in conjunction with the `BulkHelpCacheUploader.ps1` script, to later upload all cached json help.",
      "line": 5
    },
    {
      "file": "explainpowershell.helpcollector/aboutcollector.ps1",
      "description": "All PowerShell built in about_-articles are also scraped and available. This is a treasure trove for additional details for many Explanations. \n\nAnother cool thing is that you can get a link to the about_-article by just asking for an Explanation with only the about_-article. For instance, requesting `about_History` will give you an explanation result with the link to that about_-article.\n\nAbout_-articles are only available after updating help from the internet. That's why there is a check if they are present at the top, and if not, an update help.\n\nWhen we want to be able to provide links to the about_-articles to the end user, we need to find the online url for them. I have not found a more elegant way than trial and error yet. Each possibility is tried in turn until a request succeeds.\n\nAt the last part, the synopsis of the about_article is extracted, so we have some info to show to the user.\n\nAll found info is piped to the pipeline as objects, so we can further process them elsewhere.\n\nThis code is used in the `bootstrap.ps1` script to ensure a working dev environment.\n\n\n> To view the help data in Azurite or in your own Azure Table in Azure, you can use the `Microsoft Azure Storage Explorer` application, found here: https://azure.microsoft.com/en-us/features/storage-explorer/",
      "line": 2
    }
  ]
}