{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "High level tour of the application",
  "steps": [
    {
      "file": "explainpowershell.frontend/Pages/Index.razor",
      "description": "Welcome at the high-level tour of Explain PowerShell!\n\nWe will follow the journey of one user request trough the application and this is where that begins; the text input field where you can enter your PowerShell oneliner.\n\nIf the user presses Enter or clicks the `Explain` button, the oneliner is sent from this frontend to the backend api, the SyntaxAnalyzer endpoint.\n\nLet's see what happens there, and we will come back once we have an explanation to display here.",
      "line": 12,
      "selection": {
        "start": {
          "line": 16,
          "character": 34
        },
        "end": {
          "line": 22,
          "character": 23
        }
      }
    },
    {
      "file": "explainpowershell.analysisservice/SyntaxAnalyzer.cs",
      "description": "This is where the PowerShell oneliner is sent to, the SyntaxAnalyzer endpoint, an Azure FunctionApp. \n\nWe use PowerShell's own parsing engine to parse the oneliner that was sent, the parser creates a so called Abstract Syntax Tree (AST), a logical representation of the oneliner in a convenient tree format that we can then 'walk' in an automated fashion. ",
      "line": 24
    },
    {
      "file": "explainpowershell.analysisservice/SyntaxAnalyzer.cs",
      "description": "The AST is analyzed here, via the AstVisitorExplainer. It basically looks at all the logical elements of the oneliner and generates an explanation for each of them.\n\nWe will have a brief look there as well, to get the basic idea.",
      "line": 53
    },
    {
      "file": "explainpowershell.analysisservice/AstVisitorExplainer.cs",
      "description": "This is an example of how an 'if' statement explanation is generated. When the AST contains an 'if' statement, this method is called, and an explanation for it is added to the list of explanations. ",
      "line": 577
    },
    {
      "file": "explainpowershell.analysisservice/AstVisitorExplainer.cs",
      "description": "The `Explanation` type you see here, is defined in the `Models` project, which is used both by the Backend api as well as the Blazor Frontend. \n\nLet's have a quick look there.",
      "line": 580
    },
    {
      "file": "explainpowershell.models/Explanation.cs",
      "description": "This is how the `Explanation` type is defined. Even though we will send this type through the wire from the backend api to the frontend as json, because we use this same type on both ends, we can safely reserialize this data from json back to an `Explanation` object in the Frontend. \n\nThis is a great advantage of Blazor + C# api projects, you can have shared models. In JavaScript framework + c# backend api, you have to define the model twice. Which is errorprone. Ok back to our api.",
      "line": 2
    },
    {
      "file": "explainpowershell.analysisservice/AstVisitorExplainer.cs",
      "description": "Once we are done going through all the elements in the AST, this method gets called, and we return all explanations and a little metadata.",
      "line": 24,
      "selection": {
        "start": {
          "line": 397,
          "character": 55
        },
        "end": {
          "line": 397,
          "character": 58
        }
      }
    },
    {
      "file": "explainpowershell.analysisservice/SyntaxAnalyzer.cs",
      "description": "if there were any parse errors, we get the message for that here.",
      "line": 61
    },
    {
      "file": "explainpowershell.analysisservice/SyntaxAnalyzer.cs",
      "description": "We send our list of explanations, and any parse error messages back to the frontend.",
      "line": 65
    },
    {
      "file": "explainpowershell.frontend/Pages/Index.razor",
      "description": "This is where we re-create the AST tree a little bit, and generate our own tree, to display everything in a nice tree view, ordered logically. ",
      "line": 250,
      "selection": {
        "start": {
          "line": 29,
          "character": 29
        },
        "end": {
          "line": 29,
          "character": 38
        }
      }
    },
    {
      "file": "explainpowershell.frontend/Pages/Index.razor",
      "description": "Here is where we display all the tree items. This is basically a foreach, with an ItemTemplate that is filled in for each item in the tree.\n\nThis is how the end user gets to see the explanation that was generated for them.\n\nThis is the end of the high-level tour",
      "line": 29
    }
  ]
}