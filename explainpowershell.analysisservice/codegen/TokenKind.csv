Name;EnumNumber;Explanation
Ampersand;28;The invocation operator '&'.
And;53;The logical and operator '-and'.
AndAnd;26;The (unimplemented) operator '&&'.
As;94;The type conversion operator '-as'.
Assembly;165;The 'assembly' keyword
AtCurly;23;The opening token of a hash expression '@{'.
AtParen;22;The opening token of an array expression '@('.
Band;56;The bitwise and operator '-band'.
Base;168;The 'base' keyword
Begin;119;The 'begin' keyword.
Bnot;52;The bitwise not operator '-bnot'.
Bor;57;The bitwise or operator '-bor'.
Break;120;The 'break' keyword.
Bxor;58;The bitwise exclusive or operator '-xor'.
Catch;121;The 'catch' keyword.
Ccontains;87;The case sensitive contains operator '-ccontains'.
Ceq;76;The case sensitive equal operator '-ceq'.
Cge;78;The case sensitive greater than or equal operator '-cge'.
Cgt;79;The case sensitive greater than operator '-cgt'.
Cin;89;The case sensitive in operator '-cin'.
Class;122;The 'class' keyword.
Cle;81;The case sensitive less than or equal operator '-cle'.
Clike;82;The case sensitive like operator '-clike'.
Clt;80;The case sensitive less than operator '-clt'.
Cmatch;84;The case sensitive match operator '-cmatch'.
Cne;77;The case sensitive not equal operator '-cne'.
Cnotcontains;88;The case sensitive not contains operator '-cnotcontains'.
Cnotin;90;The case sensitive not in operator '-notin'.
Cnotlike;83;The case sensitive notlike operator '-cnotlike'.
Cnotmatch;85;The case sensitive not match operator '-cnotmatch'.
Colon;99;The PS class base class and implemented interfaces operator ':'. Also used in base class ctor calls.
ColonColon;34;The static member access operator '::'.
Comma;30;The unary or binary array operator ','.
Command;166;The 'command' keyword
Comment;10;A single line comment, or a delimited comment.
Configuration;155;"The ""configuration"" keyword"
Continue;123;The 'continue' keyword.
Creplace;86;The case sensitive replace operator '-creplace'.
Csplit;91;The case sensitive split operator '-csplit'.
Data;124;The 'data' keyword.
Define;125;The (unimplemented) 'define' keyword.
Divide;38;The division operator '/'.
DivideEquals;46;The division assignment operator '/='.
Do;126;The 'do' keyword.
DollarParen;24;The opening token of a sub-expression '$('.
Dot;35;The instance member access or dot source invocation operator '.'.
DotDot;33;The range operator '..'.
DynamicKeyword;156;The token kind for dynamic keywords
Dynamicparam;127;The 'dynamicparam' keyword.
Else;128;The 'else' keyword.
ElseIf;129;The 'elseif' keyword.
End;130;The 'end' keyword.
EndOfInput;11;Marks the end of the input script or file.
Enum;161;The 'enum' keyword
Equals;42;The assignment operator '='.
Exclaim;36;The logical not operator '!'.
Exit;131;The 'exit' keyword.
Filter;132;The 'filter' keyword.
Finally;133;The 'finally' keyword.
For;134;The 'for' keyword.
Foreach;135;The 'foreach' keyword.
Format;50;The string format operator '-f'.
From;136;The (unimplemented) 'from' keyword.
Function;137;The 'function' keyword.
Generic;7;A token that is only valid as a command name, command argument, function name, or configuration name. It may contain characters not allowed in identifiers. Tokens with this kind are always instances of StringLiteralToken or StringExpandableToken if the token contains variable references or subexpressions.
HereStringExpandable;15;A double quoted here string literal. Tokens with this kind are always instances of StringExpandableToken. even if there are no nested tokens to expand.
HereStringLiteral;14;A single quoted here string literal. Tokens with this kind are always instances of StringLiteralToken.
Hidden;167;The 'hidden' keyword
Icontains;71;The case insensitive contains operator '-icontains' or '-contains'.
Identifier;6;A simple identifier, always begins with a letter or '', and is followed by letters, numbers, or ''.
Ieq;60;The case insensitive equal operator '-ieq' or '-eq'.
If;138;The 'if' keyword.
Ige;62;The case insensitive greater than or equal operator '-ige' or '-ge'.
Igt;63;The case insensitive greater than operator '-igt' or '-gt'.
Iin;73;The case insensitive in operator '-iin' or '-in'.
Ile;65;The case insensitive less than or equal operator '-ile' or '-le'.
Ilike;66;The case insensitive like operator '-ilike' or '-like'.
Ilt;64;The case insensitive less than operator '-ilt' or '-lt'.
Imatch;68;The case insensitive match operator '-imatch' or '-match'.
In;139;The 'in' keyword.
Ine;61;The case insensitive not equal operator '-ine' or '-ne'.
InlineScript;154;The 'InlineScript' keyword
Inotcontains;72;The case insensitive notcontains operator '-inotcontains' or '-notcontains'.
Inotin;74;The case insensitive notin operator '-inotin' or '-notin'
Inotlike;67;The case insensitive not like operator '-inotlike' or '-notlike'.
Inotmatch;69;The case insensitive not match operator '-inotmatch' or '-notmatch'.
Interface;160;The 'interface' keyword
Ireplace;70;The case insensitive replace operator '-ireplace' or '-replace'.
Is;92;The type test operator '-is'.
IsNot;93;The type test operator '-isnot'.
Isplit;75;The case insensitive split operator '-isplit' or '-split'.
Join;59;The join operator '-join'.
Label;5;A label token - always begins with ':', followed by the label name. Tokens with this kind are always instances of LabelToken.
LBracket;20;The opening square brace token '['.
LCurly;18;The opening curly brace token '{'.
LineContinuation;9;A line continuation (backtick followed by newline).
LParen;16;The opening parenthesis token '('.
Minus;41;The substraction operator '-'.
MinusEquals;44;The subtraction assignment operator '-='.
MinusMinus;31;The pre-decrement operator '--'.
Module;163;The 'module' keyword
Multiply;37;The multiplication operator '*'.
MultiplyEquals;45;The multiplcation assignment operator '*='.
Namespace;162;The 'namespace' keyword
NewLine;8;A newline (one of '\n', '\r', or '\r\n').
Not;51;The logical not operator '-not'.
Number;4;Any numerical literal token. Tokens with this kind are always instances of NumberToken.
Or;54;The logical or operator '-or'.
OrOr;27;The (unimplemented) operator '||'.
Parallel;152;The 'parallel' keyword.
Param;140;The 'param' keyword.
Parameter;3;A parameter to a command, always begins with a dash ('-'), followed by the parameter name. Tokens with this kind are always instances of ParameterToken.
Pipe;29;The pipe operator '|'.
Plus;40;The addition operator '+'.
PlusEquals;43;The addition assignment operator '+='.
PlusPlus;32;The pre-increment operator '++'.
PostfixMinusMinus;96;The post-decrement operator '--'.
PostfixPlusPlus;95;The post-increment operator '++'.
Private;158;The 'private' keyword
Process;141;The 'process' keyword.
Public;157;The 'public' keyword
QuestionDot;103;
QuestionLBracket;104;
QuestionMark;100;
QuestionQuestion;102;
QuestionQuestionEquals;101;
RBracket;21;The closing square brace token ']'.
RCurly;19;The closing curly brace token '}'.
RedirectInStd;49;The (unimplemented) stdin redirection operator '<'.
Redirection;48;A redirection operator such as '2>&1' or '>>'.
Rem;39;The modulo division (remainder) operator '%'.
RemainderEquals;47;The modulo division (remainder) assignment operator '%='.
Return;142;The 'return' keyword.
RParen;17;The closing parenthesis token ')'.
Semi;25;"The statement terminator ';'."
Sequence;153;The 'sequence' keyword.
Shl;97;The shift left operator.
Shr;98;The shift right operator.
SplattedVariable;2;A splatted variable token, always begins with '@' and followed by the variable name. Tokens with this kind are always instances of VariableToken.
Static;159;The 'static' keyword
StringExpandable;13;A double quoted string literal. Tokens with this kind are always instances of StringExpandableToken even if there are no nested tokens to expand.
StringLiteral;12;A single quoted string literal. Tokens with this kind are always instances of StringLiteralToken.
Switch;143;The 'switch' keyword.
Throw;144;The 'throw' keyword.
Trap;145;The 'trap' keyword.
Try;146;The 'try' keyword.
Type;164;The 'type' keyword
Unknown;0;An unknown token, signifies an error condition.
Until;147;The 'until' keyword.
Using;148;The (unimplemented) 'using' keyword.
Var;149;The (unimplemented) 'var' keyword.
Variable;1;A variable token, always begins with '$' and followed by the variable name, possibly enclose in curly braces. Tokens with this kind are always instances of VariableToken.
While;150;The 'while' keyword.
Workflow;151;The 'workflow' keyword.
Xor;55;The logical exclusive or operator '-xor'.
